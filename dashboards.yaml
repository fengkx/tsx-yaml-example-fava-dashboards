dashboards:
  - name: Overview
    panels:
      - title: "Total Assets \U0001F4B0"
        queries:
          - bql: >-
              SELECT CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'),
              'CNY') AS value WHERE account ~ '^Assets:'
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const value = panel.queries[0].result[0]?.value[ledger.ccy];
            const valueFmt = currencyFormat.format(value ?? 0);
            return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${valueFmt}</div>`;
        template: ''
        width: 25%
        link: /我的账本/balance_sheet/
        height: 80px
      - title: "Assets Exclude Limited \U0001F4B0"
        queries:
          - bql: >-
              SELECT CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'),
              'CNY') AS value WHERE account ~ '^Assets:' AND NOT account  ~
              '^Assets:Limit';
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const value = panel.queries[0].result[0]?.value[ledger.ccy];
            const valueFmt = currencyFormat.format(value ?? 0);
            return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${valueFmt}</div>`;
        template: ''
        width: 25%
        link: /我的账本/balance_sheet/
        height: 80px
      - title: "Liabilities \U0001F4B3"
        queries:
          - bql: >-
              SELECT CONVERT(SUM(position), '{{ledger.ccy}}') AS value WHERE
              account ~ '^Liabilities:'
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const value = panel.queries[0].result[0]?.value[ledger.ccy];
            const valueFmt = currencyFormat.format(value ? -value : 0);
            return `<div style="font-size: 40px; font-weight: bold; color: #af3d3d; text-align: center;">${valueFmt}</div>`;
        template: ''
        width: 50%
        link: /我的账本/balance_sheet/
        height: 80px
      - title: "Income/Expenses \U0001F4B8 (posttax)"
        queries:
          - name: Income
            stack: income
            bql: >
              SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}',
              LAST(date)) AS value

              WHERE account ~ '^Income:' AND NOT 'pretax' IN tags

              GROUP BY year, month
            link: '/我的账本/account/Income/?time={time}'
          - name: Housing
            stack: expenses
            bql: >
              SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}',
              LAST(date)) AS value

              WHERE account ~ '^Expenses:House:' AND NOT 'travel' IN tags

              GROUP BY year, month
            link: '/我的账本/account/Expenses:Housing/?filter=-#travel&time={time}'
          - name: Food
            stack: expenses
            bql: >
              SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}',
              LAST(date)) AS value

              WHERE account ~ '^Expenses:Food:' AND NOT 'travel' IN tags

              GROUP BY year, month
            link: '/我的账本/account/Expenses:Food/?filter=-#travel&time={time}'
          - name: Shopping
            stack: expenses
            bql: >
              SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}',
              LAST(date)) AS value

              WHERE account ~ '^Expenses:Shopping:' AND NOT 'travel' IN tags

              GROUP BY year, month
            link: '/我的账本/account/Expenses:Shopping/?filter=-#travel&time={time}'
          - name: Travel
            stack: expenses
            bql: >
              SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}',
              LAST(date)) AS value

              WHERE (account ~ '^Expenses:' AND 'travel' IN tags) OR (account ~
              '^Expenses:Travel')

              GROUP BY year, month
            link: '/我的账本/account/Expenses/?filter=#travel&time={time}'
          - name: Other
            stack: expenses
            bql: >2-

                        SELECT year, month, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
              WHERE account ~ '^Expenses:' AND NOT account ~
              '^Expenses:(Housing|Food|Shopping):' AND NOT 'travel' IN tags AND
              NOT 'pretax' IN tags

              GROUP BY year, month
                        
            link: >-
              /我的账本/account/Expenses/?filter=all(-account:"^Expenses:(Housing|Food|Shopping)")
              -#travel -#pretax
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 2
              });
              const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
              // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
              const amounts = {};
              for (const query of panel.queries){
                amounts[query.name] = {};
                for (const row of query.result){
                  amounts[query.name][`${row.month}/${row.year}`] = query.stack == "income" ? -row.value[ledger.ccy] : row.value[ledger.ccy];
                }
              }
              return {
                tooltip: {
                  valueFormatter: currencyFormat.format
                },
                legend: {
                  top: "bottom"
                },
                xAxis: {
                  data: months
                },
                yAxis: {
                  axisLabel: {
                    formatter: currencyFormat.format
                  }
                },
                series: panel.queries.map((query)=>({
                    type: "bar",
                    name: query.name,
                    stack: query.stack,
                    data: months.map((month)=>amounts[query.name][month] ?? 0)
                  })),
                onClick: (event)=>{
                  const query = panel.queries.find((q)=>q.name === event.seriesName);
                  if (query) {
                    const [month, year] = event.name.split("/");
                    const link = query.link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                    window.open(link);
                  }
                }
              };
        template: ''
        link: /我的账本/income_statement/
        height: 520px
  - name: Assets
    panels:
      - title: "Assets \U0001F3E6"
        queries:
          - bql: >-
              SELECT UNITS(SUM(position)) as units, CONVERT(SUM(position),
              '{{ledger.ccy}}') as market_value
                        WHERE account_sortkey(account) ~ '^[01]'
                        GROUP BY currency, cost_currency
                        ORDER BY market_value
            link: '/我的账本/account/{account}/?time={time}'
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const data = panel.queries[0].result.filter((row)=>row.market_value[ledger.ccy]).map((row)=>({
                name: Object.keys(row.units)[0],
                value: row.market_value[ledger.ccy]
              }));
            return {
              tooltip: {
                formatter: (params)=>`${params.marker} ${ledger.commodities[params.name]?.meta.name ?? params.name} <span style="padding-left: 15px; font-weight: bold;">${currencyFormat.format(params.value)}</span> (${params.percent.toFixed(0)}%)`
              },
              series: [
                {
                  type: "pie",
                  data
                }
              ]
            };
        template: ''
        width: 50%
        link: /我的账本/balance_sheet/
      - title: "Net Worth \U0001F4B0"
        queries:
          - bql: |-
              SELECT year, month,
                    CONVERT(LAST(balance), '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS value
                    WHERE account_sortkey(account) ~ '^[01]'
                    GROUP BY year, month
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
            const amounts = {};
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            for (const row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
            }
            return {
              tooltip: {
                valueFormatter: currencyFormat.format
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  smooth: true,
                  connectNulls: true,
                  data: months.map((month)=>amounts[month])
                }
              ],
              onClick: (event)=>{
                const [month, year] = event.name.split("/");
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        link: 我的账本/income_statement/
      - title: "Portfolio \U0001F4C8"
        queries:
          - bql: |2-

                      SELECT year, month,
                            
                      CONVERT(CONVERT(CONVERT(LAST(balance), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'CNY', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS market_value,
                      CONVERT(CONVERT(CONVERT(COST(LAST(balance)), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'CNY', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS book_value
                            WHERE account ~ '^Assets:Stock' OR account ~ '^Assets:Funds' OR account ~ '^Assets:Cryptos'
                            GROUP BY year, month
                            
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
            const amounts = {};
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            for (let row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = {
                market_value: row.market_value[ledger.ccy],
                book_value: row.book_value[ledger.ccy]
              };
            }
            return {
              tooltip: {
                trigger: "axis",
                valueFormatter: currencyFormat.format
              },
              legend: {
                top: "bottom"
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  name: "Market Value",
                  smooth: true,
                  connectNulls: true,
                  data: months.map((month)=>amounts[month]?.market_value)
                },
                {
                  type: "line",
                  name: "Book Value",
                  smooth: true,
                  connectNulls: true,
                  data: months.map((month)=>amounts[month]?.book_value)
                }
              ],
              onClick: (event)=>{
                const [month, year] = event.name.split("/");
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        link: '/我的账本/balance_sheet/?time={time}'
      - title: Portfolio Gains ✨
        queries:
          - bql: |2-

                      SELECT year, month,
                            
                      CONVERT(CONVERT(CONVERT(LAST(balance), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'CNY', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS market_value,
                      CONVERT(CONVERT(CONVERT(COST(LAST(balance)), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'CNY', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS book_value
                            WHERE account ~ '^Assets:Stock' OR account ~ '^Assets:Funds' OR account ~ '^Assets:Cryptos'
                            GROUP BY year, month
                            
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
            const amounts = {};
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            for (let row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = row.market_value[ledger.ccy] - row.book_value[ledger.ccy];
            }
            return {
              tooltip: {
                valueFormatter: currencyFormat.format
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  smooth: true,
                  connectNulls: true,
                  data: months.map((month)=>amounts[month])
                }
              ]
            };
        template: ''
        width: 50%
        link: '/我的账本/balance_sheet/?time={time}'
      - title: "Asset Classes \U0001F3E6"
        queries:
          - bql: |2-

                      SELECT UNITS(SUM(position)) as units,
                            
                      CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                      WHERE account_sortkey(account) ~ '^[01]' 
                      AND NOT currency='CNY'
                      GROUP BY currency
                      ORDER BY market_value
                            
          - name: Gold
            bql: |2-

                SELECT UNITS(SUM(position)) as units,
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                    WHERE currency='CNY' AND account ~ '(^Assets:Gold)'
                    GROUP BY currency, cost_currency
                    ORDER BY market_value
                
          - name: Funds
            bql: |2-

                SELECT UNITS(SUM(position)) as units,
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                    WHERE currency='CNY' AND account ~ '(^Assets:Funds)'
                    GROUP BY currency, cost_currency
                    ORDER BY market_value
                
          - name: Cash
            bql: |2-

                SELECT UNITS(SUM(position)) as units,
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                    WHERE currency='CNY' AND account ~ '(^Assets:Bank)|(^Assets:AliPay)|(^Assets:WechatPay)'
                    GROUP BY currency, cost_currency
                    ORDER BY market_value
                
          - name: FinanceProduct
            bql: |2-

                SELECT UNITS(SUM(position)) as units,
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                    WHERE currency='CNY' AND account ~ '(^Assets:FinanceProduct)'
                    GROUP BY currency, cost_currency
                    ORDER BY market_value
                
          - name: Limited
            bql: |2-

                SELECT UNITS(SUM(position)) as units,
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), 'CNY') AS market_value
                    WHERE currency='CNY' AND account ~ '(^Assets:Limited)'
                    GROUP BY currency, cost_currency
                    ORDER BY market_value
                
        type: echarts
        script: |-
          console.log(panel.queries);
            const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 2
            });
            let totalValue = 0;
            const assetClasses = {};
            for (const row of panel.queries[0].result){
              if (!row.market_value[ledger.ccy]) continue;
              const ccy = Object.keys(row.units)[0];
              if (ccy === "CNY") {
                continue;
              }
              const value = row.market_value[ledger.ccy];
              const assetName = ledger.commodities[ccy]?.meta.name ?? ccy;
              const assetClass = ledger.commodities[ccy]?.meta.asset_class ?? "undefined";
              if (!(assetClass in assetClasses)) {
                assetClasses[assetClass] = {
                  name: assetClass,
                  children: []
                };
              }
              assetClasses[assetClass].children.push({
                name: assetName,
                value
              });
              totalValue += value;
            }
            for(let i = 1; i < panel.queries.length; i++){
              const query = panel.queries[i];
              const assetClass = query.name;
              for (const row of query.result){
                if (!row.market_value[ledger.ccy]) continue;
                const ccy = Object.keys(row.units)[0];
                const value = row.market_value[ledger.ccy];
                const assetName = ledger.commodities[ccy]?.meta.name ?? ccy;
                if (!(assetClass in assetClasses)) {
                  assetClasses[assetClass] = {
                    name: assetClass,
                    children: []
                  };
                }
                assetClasses[assetClass].children.push({
                  name: assetName,
                  value
                });
                totalValue += value;
              }
            }
            const r = {
              totalValue,
              tooltip: {
                formatter: (params)=>`${params.marker} ${params.name} <span style="padding-left: 15px; font-weight: bold;">${currencyFormat.format(params.value)}</span> (${(params.value / totalValue * 100).toFixed(0)}%)`
              },
              legend: {
                orient: "vertical",
                left: "left"
              },
              series: [
                {
                  type: "sunburst",
                  label: {
                    show: true
                  },
                  levels: [
                    {},
                    {
                      label: {
                        show: true
                      },
                      minAngle: 20
                    },
                    {
                      label: {
                        show: true,
                        minAngle: 15
                      }
                    }
                  ],
                  data: Object.values(assetClasses),
                  emphasis: {
                    itemStyle: {
                      shadowBlur: 10,
                      shadowOffsetX: 0,
                      shadowColor: "rgba(0, 0, 0, 0.5)"
                    }
                  }
                }
              ]
            };
            console.log(r);
            return r;
        template: ''
        width: 1000px
        link: '/我的账本/balance_sheet/?time={time}'
        height: 600px
  - name: Income and Expenses
    panels:
      - title: "Avg. Income per Month (post tax) \U0001F4B0"
        queries:
          - bql: |

              SELECT 
                  CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                  AS value
              WHERE account ~ '^Income:' AND NOT 'pretax' in tags
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const days = (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
            const months = days / (365 / 12);
            const value = currencyFormat.format(-panel.queries[0].result[0].value[ledger.ccy] / months);
            return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${value}</div>`;
        template: ''
        width: 33.33%
        link: /我的账本/account/Income/?r=changes
        height: 80px
      - title: "Avg. Expenses per Month (post tax) \U0001F4B8"
        queries:
          - bql: |

              SELECT 
                  CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                  AS value
              WHERE account ~ '^Expenses:' AND NOT 'pretax' in tags
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const days = (Number(new Date(ledger.dateLast)) - Number(new Date(ledger.dateFirst))) / (1000 * 60 * 60 * 24) + 1;
            const months = days / (365 / 12);
            const value = currencyFormat.format(panel.queries[0].result[0].value[ledger.ccy] / months);
            return `<div style="font-size: 40px; font-weight: bold; color: #af3d3d; text-align: center;">${value}</div>`;
        template: ''
        width: 33.33%
        link: /我的账本/account/Expenses/?r=changes
        height: 80px
      - title: Avg. Savings per Month (post tax) ✨
        queries:
          - bql: |

              SELECT 
                  CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                  AS value
              WHERE account ~ '^Income:' AND NOT 'pretax' in tags
          - bql: |

              SELECT 
                  CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                  AS value
              WHERE account ~ '^Expenses:' AND NOT 'pretax' in tags
        type: html
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const percentFormat = new Intl.NumberFormat(undefined, {
                style: "percent",
                maximumFractionDigits: 0
              });
              const days = (Number(new Date(ledger.dateLast)) - Number(new Date(ledger.dateFirst))) / (1000 * 60 * 60 * 24) + 1;
              const months = days / (365 / 12);
              const income = -panel.queries[0].result[0].value[ledger.ccy];
              const expenses = panel.queries[1].result[0].value[ledger.ccy];
              const rate = (income - expenses) / months;
              const ratePercent = 1 - expenses / income;
              const value = `${currencyFormat.format(rate)} (${percentFormat.format(ratePercent)})`;
              return `<div style="font-size: 40px; font-weight: bold; color: #3daf46; text-align: center;">${value}</div>`;
        template: ''
        width: 33.33%
        link: /我的账本/account/Expenses/?r=changes
        height: 80px
      - title: "Income Categories (per month) post tax \U0001F4B8"
        queries:
          - bql: |2-

                      SELECT
                        root(account, 4) AS account,
                        CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                      AS value
                      WHERE account ~ '^Income:'
                        AND NOT 'pretax' IN tags
                      GROUP BY account
                      
            link: '/我的账本/account/{account}/?r=changes&time={time}'
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const days = (Number(new Date(ledger.dateLast)) - Number(new Date(ledger.dateFirst))) / (1000 * 60 * 60 * 24) + 1;
              const divisor = days / (365 / 12);
              const accountTree = helpers.buildAccountTree(panel.queries[0].result, (row)=>-row.value[ledger.ccy] / divisor, (parts, i)=>parts[i]);
              // use click event on desktop, dblclick on mobile
              const clickEvt = window.screen.width < 800 ? "onDblClick" : "onClick";
              return {
                tooltip: {
                  valueFormatter: currencyFormat.format
                },
                series: [
                  {
                    type: "sunburst",
                    radius: "100%",
                    label: {
                      minAngle: 20
                    },
                    nodeClick: false,
                    data: accountTree.children[0].children
                  }
                ],
                [clickEvt]: (event)=>{
                  const account = "Income" + event.treePathInfo.map((i)=>i.name).join(":");
                  const time = new URLSearchParams(window.location.search).get("time") ?? "";
                  const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", account).replace("{time}", time);
                  window.open(link);
                }
              };
        template: ''
        width: 50%
        link: /我的账本/account/Income/?r=changes
      - title: "Expenses Categories (per month) \U0001F4B8"
        queries:
          - bql: |2-

                      SELECT
                        root(account, 4) AS account,
                        CONVERT(CONVERT(CONVERT(SUM(position), 'USD'), 'HKD'), '{{ledger.ccy}}')
                      AS value
                      WHERE account ~ '^Expenses:'
                        AND NOT 'pretax' IN tags
                      GROUP BY account
                      
            link: '/我的账本/account/{account}/?r=changes&time={time}'
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const days = (Number(new Date(ledger.dateLast)) - Number(new Date(ledger.dateFirst))) / (1000 * 60 * 60 * 24) + 1;
              const divisor = days / (365 / 12);
              const accountTree = helpers.buildAccountTree(panel.queries[0].result, (row)=>row.value[ledger.ccy] / divisor, (parts, i)=>parts[i]);
              accountTree.children[0].children.forEach((secondLevel)=>{
                if (secondLevel.children.length > 0) {
                  secondLevel.children.forEach((thirdLevel)=>{
                    // 关闭4层
                    thirdLevel.children = [];
                  });
                }
              });
              // use click event on desktop, dblclick on mobile
              const clickEvt = window.screen.width < 800 ? "onDblClick" : "onClick";
              return {
                tooltip: {
                  valueFormatter: currencyFormat.format
                },
                series: [
                  {
                    type: "sunburst",
                    radius: "100%",
                    label: {
                      minAngle: 20
                    },
                    nodeClick: false,
                    data: accountTree.children[0].children
                  }
                ],
                [clickEvt]: (event)=>{
                  const account = "Expenses" + event.treePathInfo.map((i)=>i.name).join(":");
                  const time = new URLSearchParams(window.location.search).get("time") ?? "";
                  const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", account).replace("{time}", time);
                  window.open(link);
                }
              };
        template: ''
        width: 50%
        link: /我的账本/account/Expenses/?r=changes
      - title: "Food Expenses \U0001F950"
        queries:
          - bql: |2-

                    SELECT year, month, 
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD', LAST(date)), 'HKD', LAST(date)), '{{ledger.ccy}}', LAST(date))
                    AS value
                            WHERE account ~ '^Expenses:Food:'
                            GROUP BY year, month
                    
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
            const amounts = {};
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            for (let row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
            }
            return {
              tooltip: {
                valueFormatter: currencyFormat.format
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  smooth: true,
                  data: months.map((month)=>amounts[month] ?? 0)
                }
              ],
              onClick: (event)=>{
                const [month, year] = event.name.split("/");
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        link: '/我的账本/account/Expenses:Food/'
      - title: "Health Expenses \U0001F3E5"
        queries:
          - bql: |2-

                    SELECT year, month, 
                    CONVERT(CONVERT(CONVERT(SUM(position), 'USD', LAST(date)), 'HKD', LAST(date)), '{{ledger.ccy}}', LAST(date))
                    AS value
                            WHERE account ~ '^Expenses:Health:'
                            GROUP BY year, month
                    
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const months = helpers.iterateMonths(ledger.dateFirst, ledger.dateLast).map((m)=>`${m.month}/${m.year}`);
            const amounts = {};
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            for (let row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
            }
            return {
              tooltip: {
                valueFormatter: currencyFormat.format
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  smooth: true,
                  data: months.map((month)=>amounts[month] ?? 0)
                }
              ],
              onClick: (event)=>{
                const [month, year] = event.name.split("/");
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        link: '/我的账本/account/Expenses:Health/'
      - title: "Income Year-Over-Year \U0001F4B0"
        queries:
          - bql: |2-

                    SELECT year, root(account, 3) AS account, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
                    WHERE account ~ "^Income:" AND NOT 'pretax' IN tags
                    GROUP BY account, year
                    ORDER BY account
                    
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const years = helpers.iterateYears(ledger.dateFirst, ledger.dateLast);
            const maxAccounts = 7; // number of accounts to show, sorted by sum
            const accountSums = {};
            const amounts = {};
            for (let row of panel.queries[0].result){
              if (!(row.account in accountSums)) accountSums[row.account] = 0;
              const value = row.account.startsWith("Income:") ? -row.value[ledger.ccy] : row.value[ledger.ccy];
              amounts[`${row.year}/${row.account}`] = value;
              accountSums[row.account] += value;
            }
            const accounts = Object.entries(accountSums).sort(([, a], [, b])=>b - a).map(([name])=>name).slice(0, maxAccounts).reverse();
            return {
              legend: {
                top: "bottom"
              },
              tooltip: {
                formatter: "{a}"
              },
              xAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              yAxis: {
                data: accounts.map((account)=>account.split(":").slice(1).join(":"))
              },
              grid: {
                containLabel: true,
                left: 0
              },
              series: years.map((year)=>({
                  type: "bar",
                  name: year,
                  data: accounts.map((account)=>amounts[`${year}/${account}`] ?? 0),
                  label: {
                    show: true,
                    position: "right",
                    formatter: (params)=>currencyFormat.format(params.value)
                  }
                })),
              onClick: (event)=>{
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", accounts[event.dataIndex]).replace("{time}", event.seriesName);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        height: 700px
      - title: "Expenses Year-Over-Year \U0001F4B8"
        queries:
          - bql: |2-

                        SELECT year, root(account, 2) AS account, CONVERT(SUM(position), '{{ledger.ccy}}', LAST(date)) AS value
                        WHERE account ~ "^Expenses:" AND NOT 'pretax' IN tags
                        GROUP BY account, year
                        ORDER BY account
                    
            link: '/我的账本/account/{account}/?time={time}'
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const years = helpers.iterateYears(ledger.dateFirst, ledger.dateLast);
            const maxAccounts = 7; // number of accounts to show, sorted by sum
            const accountSums = {};
            const amounts = {};
            for (let row of panel.queries[0].result){
              if (!(row.account in accountSums)) accountSums[row.account] = 0;
              const value = row.account.startsWith("Income:") ? -row.value[ledger.ccy] : row.value[ledger.ccy];
              amounts[`${row.year}/${row.account}`] = value;
              accountSums[row.account] += value;
            }
            const accounts = Object.entries(accountSums).sort(([, a], [, b])=>b - a).map(([name])=>name).slice(0, maxAccounts).reverse();
            return {
              legend: {
                top: "bottom"
              },
              tooltip: {
                formatter: "{a}"
              },
              xAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              yAxis: {
                data: accounts.map((account)=>account.split(":").slice(1).join(":"))
              },
              grid: {
                containLabel: true,
                left: 0
              },
              series: years.map((year)=>({
                  type: "bar",
                  name: year,
                  data: accounts.map((account)=>amounts[`${year}/${account}`] ?? 0),
                  label: {
                    show: true,
                    position: "right",
                    formatter: (params)=>currencyFormat.format(params.value)
                  }
                })),
              onClick: (event)=>{
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", accounts[event.dataIndex]).replace("{time}", event.seriesName);
                window.open(link);
              }
            };
        template: ''
        width: 50%
        height: 700px
      - title: Top 10 biggest expenses
        queries:
          - bql: |2-

                    SELECT
                      date,
                      payee,
                      narration,
                      CONVERT(CONVERT(CONVERT(position, 'USD'), 'HKD'), '{{ledger.ccy}}') as cost
                    WHERE
                      account ~ "^Expenses:"
                      AND NOT 'pretax' IN tags
                    ORDER BY cost DESC LIMIT 10
                    
        type: jinja2
        template: |2-

                {% import "_query_table.html" as querytable %}
                {{ querytable.querytable(favaledger, None, panel.queries[0].result_types, panel.queries[0].result) }}
              
        width: 20%
      - title: 现金流量表
        queries: []
        type: echarts
        script: 'return {};'
        template: ''
        width: 75%
  - name: Traveling
    panels:
      - title: "Travel Costs per Year \U0001F4C5"
        queries:
          - bql: |2-

                      SELECT year, CONVERT(CONVERT(CONVERT(SUM(position), 'USD', LAST(date)), 'HKD', LAST(date)), '{{ledger.ccy}}', LAST(date)) AS value
                            WHERE account ~ '^Expenses:' AND ('travel' IN tags OR account ~ '^Expenses:Travel')
                            GROUP BY year
                      
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const years = helpers.iterateYears(ledger.dateFirst, ledger.dateLast);
              const amounts = {};
              // the beancount query only returns months where there was at least one matching transaction, therefore we group by year
              for (let row of panel.queries[0].result){
                amounts[row.year] = row.value[ledger.ccy];
              }
              return {
                tooltip: {
                  valueFormatter: currencyFormat.format
                },
                xAxis: {
                  data: years
                },
                yAxis: {
                  axisLabel: {
                    formatter: currencyFormat.format
                  }
                },
                series: [
                  {
                    type: "line",
                    smooth: true,
                    data: years.map((year)=>amounts[year] ?? 0)
                  }
                ],
                onClick: (event)=>{
                  const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", event.name);
                  window.open(link);
                }
              };
        template: ''
        link: >-
          /我的账本/income_statement/?filter=any(account:"^Expenses:Travel.*"),#travel
      - title: Destinations ✈️
        queries:
          - link: >-
              /我的账本/income_statement/?filter=any(account:"^Expenses:Travel.*"),#travel
            bql: |2-

                      SELECT year, tags, CONVERT(CONVERT(CONVERT(position, 'USD'), 'HKD'), '{{ledger.ccy}}') AS value
                      WHERE account ~ '^Expenses:' AND ('travel' IN tags OR account ~ '^Expenses:Travel')
                      ORDER BY date, tags DESC
                      
        type: echarts
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const travels = [];
              const amounts = {};
              for (const row of panel.queries[0].result){
                console.log(row.tags);
                const tag = `${row.tags.find((tag)=>tag.match(/^trip/)) ?? "unknown"}_${row.year}`;
                if (!(tag in amounts)) {
                  travels.push(tag);
                  amounts[tag] = 0;
                }
                amounts[tag] += row.value.number;
              }
              return {
                tooltip: {
                  valueFormatter: currencyFormat.format
                },
                grid: {
                  containLabel: true,
                  left: 0
                },
                xAxis: {
                  type: "value",
                  axisLabel: {
                    formatter: currencyFormat.format
                  }
                },
                yAxis: {
                  type: "category",
                  data: travels
                },
                series: [
                  {
                    type: "bar",
                    data: travels.map((travel)=>amounts[travel]),
                    label: {
                      show: true,
                      position: "right",
                      formatter: (params)=>currencyFormat.format(params.value)
                    }
                  }
                ],
                onClick: (event)=>{
                  const link = panel.queries[0].link.replaceAll("#", "%23").replace("{travel}", event.name);
                  window.open(link);
                }
              };
        template: ''
        link: >-
          /我的账本/income_statement/?filter=any(account:"^Expenses:Travel.*"),#travel
  - name: Sankey PostTax
    panels:
      - title: Sankey PostTax
        queries:
          - bql: |2-

                      SELECT account, CONVERT(SUM(position), '{{ledger.ccy}}') AS value
                            WHERE account ~ '^(Income|Expenses):' AND NOT 'pretax' in tags
                            GROUP BY account
                      
            link: '/我的账本/account/{account}/?time={time}'
        type: d3_sankey
        script: |-
          const currencyFormat = new Intl.NumberFormat(undefined, {
                style: "currency",
                currency: ledger.ccy,
                maximumFractionDigits: 0
              });
              const days = // @ts-expect-error
              (new Date(ledger.dateLast) - new Date(ledger.dateFirst)) / (1000 * 60 * 60 * 24) + 1;
              const divisor = days / (365 / 12); // monthly
              const valueThreshold = 10; // skip nodes below this value
              const nodes = [
                {
                  name: "Income"
                }
              ];
              const links = [];
              function addNode(root) {
                for (let node of root.children){
                  let label = node.name.split(":").pop();
                  // skip over pass-through accounts
                  while(node.children.length === 1){
                    node = node.children[0];
                    label += ":" + node.name.split(":").pop();
                  }
                  // skip nodes below the threshold
                  if (Math.abs(node.value / divisor) < valueThreshold) continue;
                  nodes.push({
                    name: node.name,
                    label
                  });
                  if (node.name.startsWith("Income:")) {
                    links.push({
                      source: node.name,
                      target: root.name,
                      value: -node.value / divisor
                    });
                  } else {
                    links.push({
                      source: root.name == "Expenses" ? "Income" : root.name,
                      target: node.name,
                      value: node.value / divisor
                    });
                  }
                  addNode(node);
                }
              }
              const accountTree = helpers.buildAccountTree(panel.queries[0].result, (row)=>row.value[ledger.ccy]);
              addNode(accountTree.children[0]);
              addNode(accountTree.children[1]);
              const savings = accountTree.children[0].name === "Income" ? -accountTree.children[0].value - accountTree.children[1].value : -accountTree.children[1].value - accountTree.children[0].value;
              if (savings > 0) {
                nodes.push({
                  name: "Savings"
                });
                links.push({
                  source: "Income",
                  target: "Savings",
                  value: savings / divisor
                });
              }
              return {
                align: "left",
                valueFormatter: currencyFormat.format,
                data: {
                  nodes,
                  links
                },
                onClick: (event, node)=>{
                  if (node.name === "Savings") return;
                  const time = new URLSearchParams(window.location.search).get("time") ?? "";
                  const link = panel.queries[0].link.replaceAll("#", "%23").replace("{account}", node.name).replace("{time}", time);
                  window.open(link);
                }
              };
        template: ''
        link: 我的账本/income_statement
        height: 800px
  - name: Projection
    panels:
      - title: Net Worth
        queries:
          - bql: |2-

                          SELECT year, month,
                            CONVERT(CONVERT(CONVERT(LAST(balance), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)) AS value
                            WHERE account_sortkey(account) ~ '^[01]'
                            GROUP BY year, month
                            ORDER BY year, month
            link: '/我的账本/balance_sheet/?time={time}'
          - bql: |2-

                          SELECT year, month,
                          CONVERT(CONVERT(CONVERT(LAST(balance), 'USD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), 'HKD', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1)), '{{ledger.ccy}}', DATE_ADD(YMONTH(DATE_ADD(YMONTH(FIRST(date)), 31)), -1))
                             AS value
                            WHERE
                              account_sortkey(account) ~ '^[01]' 
                              AND NOT 'wedding' IN tags 
                              AND NOT 'weddinggift' IN tags 
                              AND NOT account ~ '.*Onetime.*'
                            GROUP BY year, month
                            ORDER BY year, month
        type: echarts
        script: |-
          console.log(panel);
            const currencyFormat = new Intl.NumberFormat(undefined, {
              style: "currency",
              currency: ledger.ccy,
              maximumFractionDigits: 0
            });
            const projectYears = 2; // number of years to project
            // the beancount query only returns months where there was at least one matching transaction, therefore we group by month
            const amounts = {};
            const amountsEx = {};
            for (const row of panel.queries[0].result){
              amounts[`${row.month}/${row.year}`] = row.value[ledger.ccy];
            }
            for (const row of panel.queries[1].result){
              amountsEx[`${row.month}/${row.year}`] = row.value[ledger.ccy];
            }
            const results = panel.queries[0].result;
            const resultsEx = panel.queries[1].result;
            const finalAmount = results[results.length - 1].value[ledger.ccy];
            const dateFirst = new Date(resultsEx[0].year, resultsEx[0].month - 1, 1);
            const dateLast = new Date(new Date(resultsEx[resultsEx.length - 1].year, resultsEx[resultsEx.length - 1].month, 1).getTime() - 1);
            const days = (Number(dateLast) - Number(dateFirst)) / (1000 * 60 * 60 * 24) + 1;
            const totalDiff = resultsEx[resultsEx.length - 1].value[ledger.ccy] - resultsEx[0].value[ledger.ccy];
            const monthlyDiff = totalDiff / days * (365 / 12);
            const dateLastYear = dateLast.getFullYear();
            const dateLastMonth = dateLast.getMonth() + 1;
            const dateFirstStr = `${dateFirst.getFullYear()}-${dateFirst.getMonth() + 1}-1`;
            const dateProjectUntilStr = `${dateLastYear + projectYears}-${dateLastMonth}-1`;
            const months = helpers.iterateMonths(dateFirstStr, dateProjectUntilStr).map((m)=>`${m.month}/${m.year}`);
            const lastMonthIdx = months.findIndex((m)=>m === `${dateLastMonth}/${dateLastYear}`);
            const projection = [];
            let sum = finalAmount;
            for(let i = lastMonthIdx; i < months.length; i++){
              projection[months[i]] = sum;
              sum += monthlyDiff;
            }
            return {
              tooltip: {
                trigger: "axis",
                valueFormatter: (val)=>val ? currencyFormat.format(val) : ""
              },
              legend: {
                top: "bottom"
              },
              xAxis: {
                data: months
              },
              yAxis: {
                axisLabel: {
                  formatter: currencyFormat.format
                }
              },
              series: [
                {
                  type: "line",
                  name: "Net Worth",
                  smooth: true,
                  connectNulls: true,
                  showSymbol: false,
                  data: months.map((month)=>amounts[month])
                },
                {
                  type: "line",
                  name: "Excluding onetime txns",
                  smooth: true,
                  connectNulls: true,
                  showSymbol: false,
                  data: months.map((month)=>amountsEx[month])
                },
                {
                  type: "line",
                  name: "Projection",
                  lineStyle: {
                    type: "dashed"
                  },
                  showSymbol: false,
                  data: months.map((month)=>projection[month])
                }
              ],
              onClick: (event)=>{
                if (event.seriesName === "Projection") return;
                const [month, year] = event.name.split("/");
                const link = panel.queries[0].link.replaceAll("#", "%23").replace("{time}", `${year}-${month.padStart(2, "0")}`);
                window.open(link);
              }
            };
        template: ''
        link: /我的账本/income_statement/
